const { username, password, role } = req.body;

    try {
        const userModel = role === 'admin' ? Admin : Faculty;
        const result = await userModel.findOne({ email: username, verified: 1 }).exec();
        log(result);

        if (!result) {
            log("Result not found");
            handleInvalidDetails(res);
            return;
        }

        if (result.lock) {
            handleAccountLock(username, role, result, req, res);
            return;
        }

        const auth = await bcrypt.compare(password, result.password);
        log(auth);

        if (auth) {
            log("here");
            log("reached");
            const result2 = await SigninCount.findOne({ $and: [{ ip: req.ip }, { email: username }] }).exec();

            if (result2 && result2.count >= 5) {
                handleAccountLock(username, role, result, req, res);
            } else {
                if (result2) {
                    await SigninCount.deleteOne({ _id: result2._id });
                }

                const token = createToken(result, role);
                res.cookie('accesstoken', token, { httpOnly: true, maxAge: limit }).status(200);
                res.redirect('/');
            }
        } else {
            handleInvalidDetails(res);
        }
    } catch (error) {
        console.log(error);
        res.status(400).send('Not found');
    }